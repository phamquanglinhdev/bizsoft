<?php

namespace App\Models;

use Database\Factories\StudentFactory;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Hash;
use Laravel\Sanctum\HasApiTokens;

/**
 *
 */
class Student extends User
{
    protected static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope(function (Builder $builder) {
            $builder->where("role", "student");
        });
        static::creating(function ($query) {
            $query->role = "student";
            $query->password = $query->password ?? Hash::make($query->email);
        });
    }

    use HasFactory, HasApiTokens, Notifiable;

    /**
     * @var string[]
     */
    protected $table = "users";
    /**
     * @var string[]
     */
    protected $fillable = [
        "avatar",
        "code",
        "name",
        "birthday",
        "address",
        "gender",
        "phone",
        "email",
        "parent",
        "password",
        "role"
    ];
    /**
     * @var string[]
     */
    protected $hidden = [
        "password",
        "remember_token"
    ];
    /**
     * @var string[]
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
//        'password' => 'hashed',
    ];

    public function Classrooms(): BelongsToMany
    {
        return $this->belongsToMany(Classroom::class, "classroom_student", "student_id", "classroom_id");
    }

    public function ClassroomConnect(): array
    {
        return $this->Classrooms()->withPivot("pricing", "start", "status", "promote", "done", "paid", "apm")->get()->map(function ($pivotData) {
            return [
                'id' => $pivotData["id"],
                'name' => $pivotData["name"],
                "pricing" => $pivotData["pivot"]["pricing"],
                "promote" => $pivotData["pivot"]["promote"],
                "start" => Carbon::parse($pivotData["pivot"]["start"])->isoFormat("DD/MM/YYYY"),
                "status" => $this->getStatusConnect($pivotData["pivot"]["status"]),
                "paid" => $pivotData["pivot"]["paid"],
                "missing" => $pivotData["pivot"]["pricing"] - $pivotData["pivot"]["promote"] - $pivotData["pivot"]["paid"],
                'apm' => Carbon::parse($pivotData["pivot"]["apm"])->isoFormat("DD/MM/YYYY"),
                "done" => $pivotData["pivot"]["done"],
            ];
        })->toArray();
    }

    private function getStatusConnect(mixed $status): array
    {
        switch ($status ?? 0) {
            case 0:
                return [
                    "value" => 0,
                    'label' => "Đang học",
                ];
            case 1:
                return [
                    "value" => 1,
                    'label' => "Đã học xong",
                ];
            case 2:
                return [
                    "value" => 2,
                    'label' => "Đang bảo lưu",
                ];
        }
        return [];
    }
}
